import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.Date;
import java.util.StringTokenizer;

/**
 * Class that uses runnable to handle http request from the 
 * acap application and javascript application
 * 
 * @author Yurdaer & Hadi
 *
 */
public class WebThread implements Runnable {
	private Socket socket;
	private File ROOT = new File(".");
	
	public WebThread(Socket socket){
		this.socket = socket;
	}
	
	/*
	 * Runnable used for the client http request
	 * @see java.lang.Runnable#run()
	 */
	@Override
    public void run() {
        
        BufferedReader input = null;
        PrintWriter output = null;
        BufferedOutputStream dataOutput = null;
        String fileReq = null;

        try {
            // we read characters from the client via input stream on the socket
            input = new BufferedReader(new InputStreamReader(socket.getInputStream()));

            // we get character output stream to client (for headers)
            output = new PrintWriter(socket.getOutputStream());

            // get binary output stream to client (for requested data)
            dataOutput = new BufferedOutputStream(socket.getOutputStream());

            // Get the type of request and content
            String str = input.readLine();

            //Parsing the request to extract the request received
            StringTokenizer parse = new StringTokenizer(str);

            // Parse the end to know what request
            String method = parse.nextToken().toUpperCase();
            
            // Parse and get the time it was triggered
            String date_time = parse.nextToken("/ ");
            
            // Parses the rest of the requested http received
            fileReq = parse.nextToken().toLowerCase();

            // Check if GET method requested and what request was called

            if (fileReq.endsWith("get_data")) {
                fileReq = "get_data.html";
            }
            else if(fileReq.endsWith("set_data")) {
                fileReq = "set_data.html";
            }
            
            if(method.equals("GET")) {

                File file = new File(ROOT, fileReq);
                int fileLength = (int) file.length();

                byte[] fileData = readFileData(file, fileLength);

                // HTTP Headers to send
                output.println("HTTP/1.1 200 OK");
                output.println("Date: " + new Date());
                output.println("Content-type: " + "text/html");
                output.println("Content-length: " + fileLength);
                output.println(); 
                output.flush();

                dataOutput.write(fileData, 0, fileLength);
                dataOutput.flush();

            } else if(method.equals("POST")){
                File database = new File("test.txt");

                //Create the file
                if (database.createNewFile())
                {
                    System.out.println("File is created!");
                } else {
                    System.out.println("File already exists.");
                }

                //Write Content
                FileWriter writer = new FileWriter(database,true);
                writer.write(date_time+"\n");
                System.out.println(date_time+"\n");
                writer.close();

                File file = new File(ROOT, fileReq);
                int fileLength = (int) file.length();

                byte[] fileData = readFileData(file, fileLength);

                // HTTP Headers to send
                output.println("HTTP/1.1 200 OK");
                output.println("Date: " + new Date());
                output.println("Content-type: " + "text/html");
                output.println("Content-length: " + fileLength);
                output.println();
                output.flush();

                dataOutput.write(fileData, 0, fileLength);
                dataOutput.flush();
            }

          

        } catch (FileNotFoundException fnfe) {
            System.out.println("FAILED! FILE NOT FOUND!");

        } catch (IOException ioe) {
            System.err.println("Server Err : " + ioe);
        } finally {
            try {
                input.close(); 		// close inputstream
                output.close(); 	// close outputstream
                dataOutput.close(); // close dataOutput
                socket.close(); 	// close the connection
            } catch (Exception e) {
                System.err.println("Error, Closing Stream : " + e.getMessage());
            }

            
            System.out.println("Closed connection.\n");
            
        }

    }

    private byte[] readFileData(File file, int fileLength) throws IOException {
        FileInputStream fileInputStream = null;
        byte[] fileData = new byte[fileLength];

        try {
            fileInputStream = new FileInputStream(file);
            fileInputStream.read(fileData);
        } finally {
            if (fileInputStream != null)
                fileInputStream.close();
        }

        return fileData;
    }

}
